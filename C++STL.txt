Queue:


int main() {
	// Follows FIFO similar to a queue
	queue<string> q;
	
	q.push("M");
	q.push(" Sajid ");
	q.push(" Hussain ");
	
	cout<<"First is "<<q.front()<<endl;
	
	q.pop();
	cout<<"First is "<<q.front()<<endl;
	
	cout<<"Size after pop is "<<q.size()<<endl;
	
	return 0;
}


Stack:

int main() {
    //stack follows lifo 
	stack<string> s;
	
	s.push("Sajid");
	s.push("Junaid");
	s.push("Abid");
	
	cout<<s.top()<<endl;
	
	s.pop();
	cout<<s.top()<<endl;
	
	cout<<"Size of stack "<<s.size()<<endl;
	cout<<"Empty or not "<<s.empty()<<endl;
	
	return 0;
}


List:

int main() {
    list<int> l;
    
    //copy
    list<int> m(l);
    l.push_back(1);
    l.push_front(2);
    for(int i:l){
        cout<<i<<endl;
    }
    
    l.erase(l.begin(),l.end());
    for(int i:l){
        cout<<i<<endl;
    }
    
    cout<<"Size of list"<<l.size();
	return 0;
}


Array:

int main() {
    array<int,4> a={1,2,3,4};
    
    int n=a.size();
    
    for(int i=0;i<n;i++){
        cout<<a[i];
    }
    
    cout<<"Element at 2 is "<<a[2]<<" "<<a.at(2);
    cout<<"Empty or not "<<a.empty()<<endl;
    
    cout<<"First Element "<<a.front()<<endl;
    cout<<"Last Element "<<a.back()<<endl;
    cout<<"Size of Array is"<<n;
	
	return 0;
}


Vector:


int main() {
    
        vector<pair<int,int>> v;
        
        v.push_back({3,3});
        v.push_back({1,4});
        v.push_back({2,5});
        
        sort(v.begin(),v.end());
        
        for(int i=0;i<3;i++){
            cout<<v[i].first<<" "<<v[i].second;
            cout<<endl;
            
        }
        
        
        
      return 0;
        
    }


    
deque
    int main() {
	//deque is used to push and pop on both sides
	deque<int> d;
	d.push_back(1);
	d.push_front(2);
	
	for(int i:d){
	    cout<<i<<endl;
	}
	cout<<endl;
	// d.pop_back();
	//d.pop_front();
// 	for(int i:d){
// 	    cout<<i<<endl;
// 	}
	//1st index element
	cout<<d[0]<<endl;
	cout<<d.at(1);
	
	cout<<endl;
	cout<<endl;
	
	cout<<"Front"<<d.front()<<endl;
	cout<<d.back()<<endl;
	
	cout<<"Empty or Not"<<d.empty()<<endl;
	
	cout<<"Before Erasing"<<d.size()<<endl;
	d.erase(d.begin());
	cout<<"Size after Erasing"<<d.size()<<endl;
	return 0;
}

	
