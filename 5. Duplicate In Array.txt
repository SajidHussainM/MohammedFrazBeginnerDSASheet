Question:

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3


Solutions:

1)
int findDuplicate(vector<int>& nums) {
    sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==nums[i+1]){
                return nums[i];
            }
        }
    return 0;
        
    }


2) 
//unordered map is used to link a pair of element and a key 

Ways to Insert:
        m[nums[i]]=i;
             m.insert(pair<int, int>(nums[i], i));
            
 int findDuplicate(vector<int>& nums) {
    unordered_map<int,int> m;
        int n=nums.size();
        for(int i=0;i<n;i++){
            m[nums[i]]++;
            }
        for(auto i:m){
            if(i.second>1){
                return i.first;
            }
        }
        
    return 0;
        
    }