Question 1:

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. 

Solution 1:

 void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        int nz=0;
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                nz++;
            }
        }
        
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                ans.push_back(nums[i]);
            }
        }
        
        for(int i=0;i<nz;i++){
            ans.push_back(0);
        }
        
        for(int i=0;i<n;i++){
            nums[i]=ans[i];
        }
    } 

    Space Complexity : O(n) Since we are creating the "ans" array to store results.

Time Complexity: O(n)


Solution 2:

 void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        int nonZeroFoundAt=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                nums[nonZeroFoundAt++]=nums[i];
            }
        }
        
     
    while(nonZeroFoundAt<n){
        nums[nonZeroFoundAt++]=0;
    }
        
    } 

    Time Complexity= O(n)
    Space Complexity= O(1)



    Question 2:

    Move Zeros to left of array.


    Solution:


    void moveZerosToLeft(int *arr, int n) 
{
    
   
    int a[n],ele=0;
    for(int i=0;i<n;i++){
        if(arr[i]==0)
        {
            a[ele] = arr[i];
            ele++;
        }
    }
    
    for(int i=0;i<n;i++){
        if(arr[i]!=0)
        {
            a[ele] = arr[i];
            ele++;
        }
    }
    
    for(int i=0;i<n;i++){
        arr[i]=a[i];

    }
}


