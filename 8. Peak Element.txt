Problem Statement
Given an array of ‘n’ integers arr. Find the Peak element of the array. The peak element of an array is defined as that element which is greater than both of its neighbours. I.e if arr[i] is the peak element, arr[i-1]<arr[i] and arr[i+1]<arr[i].

Solution 1:


 int findPeakElement(vector<int>& nums) {
        if(nums.size()==1){
                return 0;
        }
        if(nums.size()==2){
                return (nums[0]>nums[1])?0:1;
            }
            
        for(int i=0;i<nums.size();i++){
            
            
          
            if(i==nums.size()-1){
                if(nums[i]>nums[i-1]){
                    return i;
                }
                continue;
            }
            else if(i==0){
                if(nums[i]>nums[i+1]){
                    return i;
                }
                continue;
            }
            
            
                
         else if(nums[i]>nums[i+1] && nums[i]>nums[i-1] ){
            return i;
        }
                }
        
      
    
    return 0;
    }


Time Complexity: O(n)
Space Complexity: O(1)


Solution 2:

int findPeakElement(vector<int>& nums) {
        return search(nums, 0, nums.size()- 1);
       
    }
    
    int search(vector<int> a,int l,int r){
         if (l == r)
            return l;
        int mid=(l+r)/2;
        if(a[mid]>a[mid+1]){
            return search(a,l,mid);
        }
        return search(a,mid+1,r);
    }


Solution 3:

    public int findPeakElement(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] > nums[i + 1])
                return i;
        }
        return nums.length - 1;
    }

    Complexity Analysis

Time complexity : O(n). We traverse the numsnums array of size nn once only.

Space complexity : O(1). Constant extra space is used.
