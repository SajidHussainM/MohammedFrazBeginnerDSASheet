Question:

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Input: nums = [2,2,1,1,1,2,2]
Output: 2


Solutions:

1)

int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums[nums.size()/2];
        
    }


2)

int findMajorityElement(int arr[], int n) {
	// Write your code here.
    int low=floor(n/2);
    unordered_map<int,int> m;
    for(int i=0;i<n;i++){
        m[arr[i]]++;
    }
    for(auto x:m){
        if(x.second>n/2) return x.first;
    }
    return -1;
}
